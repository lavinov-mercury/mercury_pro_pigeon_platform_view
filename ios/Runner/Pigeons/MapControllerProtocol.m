// Autogenerated from Pigeon (v3.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "MapControllerProtocol.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface PigeonLatLon ()
+ (PigeonLatLon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation PigeonLatLon
+ (instancetype)makeWithLat:(NSNumber *)lat
    lon:(NSNumber *)lon {
  PigeonLatLon* pigeonResult = [[PigeonLatLon alloc] init];
  pigeonResult.lat = lat;
  pigeonResult.lon = lon;
  return pigeonResult;
}
+ (PigeonLatLon *)fromMap:(NSDictionary *)dict {
  PigeonLatLon *pigeonResult = [[PigeonLatLon alloc] init];
  pigeonResult.lat = GetNullableObject(dict, @"lat");
  NSAssert(pigeonResult.lat != nil, @"");
  pigeonResult.lon = GetNullableObject(dict, @"lon");
  NSAssert(pigeonResult.lon != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.lat ? self.lat : [NSNull null]), @"lat", (self.lon ? self.lon : [NSNull null]), @"lon", nil];
}
@end

@interface MapsPlatformToFlutterApiCodecReader : FlutterStandardReader
@end
@implementation MapsPlatformToFlutterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [PigeonLatLon fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface MapsPlatformToFlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation MapsPlatformToFlutterApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[PigeonLatLon class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface MapsPlatformToFlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation MapsPlatformToFlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[MapsPlatformToFlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[MapsPlatformToFlutterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *MapsPlatformToFlutterApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    MapsPlatformToFlutterApiCodecReaderWriter *readerWriter = [[MapsPlatformToFlutterApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface MapsPlatformToFlutterApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation MapsPlatformToFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)updateLocationMapId:(NSNumber *)arg_mapId latLon:(PigeonLatLon *)arg_latLon completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.MapsPlatformToFlutterApi.updateLocation"
      binaryMessenger:self.binaryMessenger
      codec:MapsPlatformToFlutterApiGetCodec()];
  [channel sendMessage:@[(arg_mapId == nil) ? [NSNull null] : arg_mapId, (arg_latLon == nil) ? [NSNull null] : arg_latLon] reply:^(id reply) {
    completion(nil);
  }];
}
@end
@interface MapsFlutterToPlatformApiCodecReader : FlutterStandardReader
@end
@implementation MapsFlutterToPlatformApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [PigeonLatLon fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface MapsFlutterToPlatformApiCodecWriter : FlutterStandardWriter
@end
@implementation MapsFlutterToPlatformApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[PigeonLatLon class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface MapsFlutterToPlatformApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation MapsFlutterToPlatformApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[MapsFlutterToPlatformApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[MapsFlutterToPlatformApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *MapsFlutterToPlatformApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    MapsFlutterToPlatformApiCodecReaderWriter *readerWriter = [[MapsFlutterToPlatformApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void MapsFlutterToPlatformApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<MapsFlutterToPlatformApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.MapsFlutterToPlatformApi.move"
        binaryMessenger:binaryMessenger
        codec:MapsFlutterToPlatformApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(moveMapId:latLon:error:)], @"MapsFlutterToPlatformApi api (%@) doesn't respond to @selector(moveMapId:latLon:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_mapId = GetNullableObjectAtIndex(args, 0);
        PigeonLatLon *arg_latLon = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api moveMapId:arg_mapId latLon:arg_latLon error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.MapsFlutterToPlatformApi.causeError"
        binaryMessenger:binaryMessenger
        codec:MapsFlutterToPlatformApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(causeErrorMapId:error:)], @"MapsFlutterToPlatformApi api (%@) doesn't respond to @selector(causeErrorMapId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_mapId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api causeErrorMapId:arg_mapId error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
